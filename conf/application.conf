# Copyright 2023 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This is the main configuration file for the application.
# ~~~~~

include "backend.conf"

appName = help-to-save-proxy

# An ApplicationLoader that uses Guice to bootstrap the application.
play.application.loader = "uk.gov.hmrc.play.bootstrap.ApplicationLoader"

# Primary entry point for all HTTP requests on Play applications
play.http.requestHandler = "uk.gov.hmrc.play.bootstrap.http.RequestHandler"

# Play Modules
# ~~~~
# Additional play modules can be added here

play.modules.enabled += "uk.gov.hmrc.mongo.play.PlayMongoModule"

play.modules.enabled += "uk.gov.hmrc.helptosaveproxy.config.CustomWSConfigParserModule"

play.modules.enabled += "uk.gov.hmrc.helptosaveproxy.config.HealthCheckModule"

play.modules.enabled += "com.kenshoo.play.metrics.PlayModule"

# Provides an implementation of AuditConnector. Use `uk.gov.hmrc.play.bootstrap.AuditModule` or create your own.
# An audit connector must be provided.
play.modules.enabled += "uk.gov.hmrc.play.audit.AuditModule"

# Provides an implementation of MetricsFilter. Use `uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule` or create your own.
# A metric filter must be provided
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule"

play.modules.enabled += "uk.gov.hmrc.play.bootstrap.AuthModule"

play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientModule"

# Provides an implementation and configures all filters required by a Platform microservice.
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.backend.BackendModule"


play.modules.disabled += "play.api.libs.ws.ahc.AhcWSModule"
play.modules.enabled += "uk.gov.hmrc.helptosaveproxy.http.NewWSModule"

play.filters.disabled += play.filters.csrf.CSRFFilter
play.filters.disabled += play.filters.hosts.AllowedHostsFilter

httpHeadersAllowslist += ${microservice.correlationIdHeaderName}

# Session Timeout
# ~~~~
# The default session timeout for the app is 15 minutes (900seconds).
# Updating this is the responsibility of the app - it must issue a new cookie with each request or the session will
# timeout 15 minutes after login (regardless of user activity).
# session.maxAge=900

# The application languages
# ~~~~~
play.i18n.langs = ["en"]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
play.http.router = prod.Routes


# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

# Root logger:
logger.root = ERROR

# Logger used by the framework:
logger.play = INFO

# Logger provided to your application:
logger.application = DEBUG

# Metrics plugin settings - graphite reporting is configured on a per env basis
metrics {
  name = ${appName}
  rateUnit = SECONDS
  durationUnit = SECONDS
  showSamples = true
  jvm = true
  enabled = true
}

# Microservice specific config

auditing {
  enabled = true
  traceRequests = true
  consumer {
    baseUri {
      host = localhost
      port = 8100
    }
  }
}


mongodb {
  uri = "mongodb://localhost:27017/help-to-save"
}

mongo-async-driver {
  akka {
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    loglevel = DEBUG
  }
}

microservice {
  metrics {
    graphite {
      host = graphite
      port = 2003
      prefix = play.${appName}.
      enabled = false
    }
  }

  services {

    auth {
      host = localhost
      port = 8500
    }

    nsi {
      host = localhost
      port = 7002
      manage-account {
        url = "https://nsandi.com"
      }
      client {
        base64KeystoreType = "pkcs12"
#       password is "ncpw"
        base64KeystorePassword = ""
        base64Keystore = ""

        httpheader {
          basicauth {
            Base64User = "dXNlcm5hbWU=" //username
            Base64Password = "" //password
          }
          header-key = "Authorization-test"
          encoding = "UTF-8"
        }
      }
      keyManager = {
        prototype = { stores = {} }
        stores = [
          {
            type = ${microservice.services.nsi.client.base64KeystoreType}
            password = ${microservice.services.nsi.client.base64KeystorePassword}
            data = ${microservice.services.nsi.client.base64Keystore}
          }
        ]
      }
      trustManager = {
        prototype = { stores = {} }
        stores = [
          {
            data = ${microservice.services.nsi.server.base64Certificate}
          }
        ]
      }
      server {
        base64Certificate = "LS0tLS1CRUdJTiBQS0NTNy0tLS0tCk1JSUM5d1lKS29aSWh2Y05BUWNDb0lJQzZEQ0NBdVFDQVFFeEFEQUxCZ2txaGtpRzl3MEJCd0dnZ2dMS01JSUMKeGpDQ0FhNENDUURsWHlmQXdTTEU0akFOQmdrcWhraUc5dzBCQVFzRkFEQWxNUTh3RFFZRFZRUUtEQVp1YzJGdQpaR2t4RWpBUUJnTlZCQU1NQ1d4dlkyRnNhRzl6ZERBZUZ3MHlNekF5TURJeE5EVTNOREJhRncwek16QXhNekF4Ck5EVTNOREJhTUNVeER6QU5CZ05WQkFvTUJtNXpZVzVrYVRFU01CQUdBMVVFQXd3SmJHOWpZV3hvYjNOME1JSUIKSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTJ0di80U0djVzRPbUlTTnBkOTBpQlJ6TQp6M0o0ek5CR2lUdDQ2NXJVeWpKamJmblF3U0NyQ0tESllVTHgxZmUyalJKQXRWalNSOXJDZmxxaVFkMjhKTWFiCjl5aStQSnoySUg4VDFFUXN0VVh6L0QyeDU4UkV2UlllKzlza1puVjhOaGw1UkRQeFRkVnlEQ0NkN2QxbXo5emsKTDM4bWFDV3lEL0R2RXgwVVFoVm56ZUVLTkI1dDl6cGNrZmJhNFdNb1RzMjArYytPUjdwQUFCdmRsc28yT04vYQowUG9YK1dqN2g0b1VpMG5NQjRWeEdBUEhkVmQwWGJ2eDBSeGNzckhCUHphTWZTZnAwRk9uTmhhRnluZGJHcnZLCitOZWJjK0szU2RnK2lPY1d3UklPdC9WRmhRdjVoL1g5Mko1ckJBMGY3Y01hRXVQd1owd3RWZjNqZkY0WkF3SUQKQVFBQk1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQnQ1bFRvTVd1b09aTktTLzAwT2p5S2tScUVQalRsV1JaSQpyTFRUdjJma0xTT0hvSUhnQi9VaXJsU24yZzYzKzJJVFhqWEZyTXZkbGNJaDlRa2JGVnlvWnpqdWhLQmVNSHYzCmFONXYzWVVtamhReU9mdXR4a3UwRklZbnk1eWdxWFhoeE15TkFZSU5BQkhIamJ5VVJ5UGU1MG9jN1lmUWdWWkcKSFFhTG9xd1pEN3RZelhScVB2dVBGT3liTXZYMFZRUGIwbGdDYmd3dGIvS0tGVHdKbFMrd01IanF5bHdGVDBBdApKWVFGZkxVbEJPRmlxUXhxYkY0RExmZUJlVkpYZ2dtT1BBeWVCMDU5RW5IM2F5NWVURVJqZXMrQkE3d0hyZXYzCm1mem0rSnl5b3Q4TE9zTWFNamluTDBWMmppMWxqYUU1Ni83NHU1dGFkRE1Bdkt3QlQwVE1vUUF4QUE9PQotLS0tLUVORCBQS0NTNy0tLS0tCg=="
        base64TruststorePassword = ""

      }
      proxy {
        proxyRequiredForThisEnvironment = false
        username = ${proxy.username}
        password = ${proxy.password}
        protocol = ${proxy.protocol}
        host = ${proxy.host}
        port = ${proxy.port}
      }
    }

    dwp {
      host = localhost
      port = 7002
      system-id = 607
      check = "hmrc"
      health-check = "hmrc-healthcheck"
      client {
        base64KeystoreType = "pkcs12"
#       password is "dcpw"
        base64KeystorePassword = ""
        base64Keystore = ""
      }
      keyManager = {
        prototype = { stores = {} }
        stores = [
          {
            type = ${microservice.services.dwp.client.base64KeystoreType}
            password = ${microservice.services.dwp.client.base64KeystorePassword}
            data = ${microservice.services.dwp.client.base64Keystore}
          }
        ]
      }
      trustManager = {
        prototype = { stores = {} }
        stores = [ {
          data = ${microservice.services.dwp.server.base64Certificate}
        } ]
      }
      server {
        base64Certificate = "LS0tLS1CRUdJTiBQS0NTNy0tLS0tCk1JSUM4UVlKS29aSWh2Y05BUWNDb0lJQzRqQ0NBdDRDQVFFeEFEQUxCZ2txaGtpRzl3MEJCd0dnZ2dMRU1JSUMKd0RDQ0FhZ0NDUUQvenp6VmFLa3daekFOQmdrcWhraUc5dzBCQVFzRkFEQWlNUXd3Q2dZRFZRUUtEQU5rZDNBeApFakFRQmdOVkJBTU1DV3h2WTJGc2FHOXpkREFlRncweU16QXlNREl4TkRVMk5UVmFGdzB6TXpBeE16QXhORFUyCk5UVmFNQ0l4RERBS0JnTlZCQW9NQTJSM2NERVNNQkFHQTFVRUF3d0piRzlqWVd4b2IzTjBNSUlCSWpBTkJna3EKaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF3L3NUR043QnRMcDVDcVZCMTZ1WldLeWF2RmpSbGEyNApMcEovbGVoNkpQTDBRaDd3aDZMNkdHS0xVOFF3YVppSUd2bWRjNDEwWk52MGlNS29zVURRSDlINGtvKzU5YUdCCkNOa1lPNUlucDludk9JVGdPY3JrNTMxWGxNaFh6cmt1b0dYZHAySXJMT09QemlQeXJSTHd3T0E3SUtpanRrSzMKbzVMVU5iTHJSeXBENjJibEhqMW05MFk3TCt5Wld4aTJsTW5hdFF5UVVmcmJMbzdoZmhlUXBYK1J1VjhZZUE0VgpGOUV5Q0xjNU1DOWxGb2theHhtZ0cyRWJGQ0w4NTFBSEV0TElodnZHQU1reEw1Z2x1V090VzVxRGY2UEpTNEt6CnNmZ3JJZVdOM0VTUXZNa0tYWU5KQURMNVhUcFMrc0RoSEYrNzRQVE5MTkkrMjlybEdzNkJMUUlEQVFBQk1BMEcKQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUNNN0wxOVdWUDIzSUdPNmJIL2NmdDBzZHhKSnRnRVB0UU5wYm9OZVorVAprOE9sTyt0OUh3cjdPS1BXN3R5akxxOFcvRGFrR3dYMFExbCs3alloVk04VFEvRE1MS0NZalBYTTNmNWRrMkxaClI2bllTY1RzcnhtRVR1bkNzSUpLZmk0SmJaYmZxeUs3U05oVTJjdzhkYk1OVXhlaDYvQ2ZveCtoVHZmUUV6N3MKWjRkRXJUQkw5RjVGVzQrMHZUcjlpK1F4VjN1WTB3MTduZ1FsdkRNejhjN3gxRWFhcC95TDBmTXJnNDVrUVNZZQpUWVZDV3psMjdjc2Y5WFhkcHFXNmRWNzJWc3dCWml5bDR4NytENUZmenZMOURvN1R4V0RUNmdMT3M1d2FaRkZiCk9TOGRqYTdtRnVFSWswS3hkWStvaitlZXhWUjBRcXBXQldnRXBaQmE3dWdlb1FBeEFBPT0KLS0tLS1FTkQgUEtDUzctLS0tLQo="
        base64TruststorePassword = ""
      }
      proxy {
        proxyRequiredForThisEnvironment = false
        username = ${proxy.username}
        password = ${proxy.password}
        protocol = ${proxy.protocol}
        host = ${proxy.host}
        port = ${proxy.port}
      }
    }
  }

  correlationIdHeaderName = "X-Correlation-ID"

}

proxy {
  username = username
  password = password
  protocol = http
  host = localhost
  port = 3128
}


health {

  nsi-connection {
    enabled = true
    poll-period = 3 minutes
    minimum-poll-period = 1 minute
    # MDTP platform default timeout is 60s, NS&I JBoss/FUSE is 40s, NS&I Thaler db is 29s
    # The health check timeout will therefore be set between the first two, i.e. 50s to allow
    # the timeout source to be identified
    poll-timeout = 50 seconds
    poll-count-between-updates = 20
    poll-count-failures-to-alert = 3
    poll-count-between-pager-duty-alerts = 20
    # in order to make sure that only one health check is running across the different instances
    # of this application in each environment a lock needs to be acquired before the health check
    # will start. This parameter controls how long this lock is valid for and when the health check
    # will try to acquire the lock again
    lock-duration = 65 minutes
  }

  dwp-connection {
    enabled = true
    poll-period = 3 minutes
    minimum-poll-period = 1 minute
    poll-timeout = 50 seconds
    poll-count-between-updates = 20
    poll-count-failures-to-alert = 3
    poll-count-between-pager-duty-alerts = 20
    lock-duration = 65 minutes
  }

}


nino-logging.enabled = true

email-validation {
  # the maximum total length of an email address
  max-total-length = 254

  # the maximum length of the local part of email address
  max-local-length = 64

  # the maximum length of the domain part of email address
  max-domain-length = 252
}

feature-toggles {
  create-account-json-validation {
    enabled = true
  }

  log-account-creation-json {
    enabled = false
  }

}

play.ws.ssl {
  # Default platform timeout is 60s which is fine as-is
  # timeout.request = 60s

  # Handles the server root CA cert list; used by the client to verify the server
  trustManager = {
    stores = [
      # Play seems to be loading default truststore without requiring any explicit config or password...
      {
        data = ${microservice.services.nsi.server.base64Certificate}
      },
      {
        data = ${microservice.services.dwp.server.base64Certificate}
      },
      {
        path = ${?java.home}/lib/security/cacerts, # Default trust store
        password = "changeit" # Default trust store password
      }
    ]
  }

  # Handles the client cert (PrivateKeyEntry consisting of 3 chained certs) as
  # supplied by NS&I; used by the server to verify the client
  keyManager = {
    stores = [
    ]
  }

  debug = {
    certpath = false
    ocsp = false
    ssl = false
    sslctx = false
    defaultctx = false
    handshake = false
    verbose = false
    data = false
    keymanager = false
    trustmanager = false
  }
}

schema = """
{
  "$schema": "http://json-schema.org/schema#",
  "description": "A JSON schema to validate JSON as described in PPM-30048-UEM009-ICD001-HTS-HMRC-Interfaces v2.0.docx",

  "type" : "object",
  "additionalProperties": false,
  "required": ["forename", "surname", "dateOfBirth", "contactDetails", "registrationChannel", "nino"],
  "properties" : {
    "version": {
			"type": "string",
			"minLength" : 1,
			"maxLength" : 6,
			"examples": [
				"V2.0"
			]
		},
		"systemId": {
			"type": "string",
			"minLength" : 1,
			"maxLength" : 20,
			"examples": [
				"MDTP REGISTRATION"
			]
		},
   "nino" : {
      "type" : "string",
      "minLength": 9,
      "maxLength": 9,
      "pattern": "^(([A-CEGHJ-PR-TW-Z][A-CEGHJ-NPR-TW-Z])([0-9]{2})([0-9]{2})([0-9]{2})([A-D]{1})|((XX)(99)(99)(99)(X)))$"
    },
    "forename" : {
      "type" : "string",
      "minLength": 1,
      "maxLength": 26
    },
    "surname": {
      "type": "string",
      "minLength": 1,
      "maxLength": 300
    },
    "dateOfBirth": {
      "type": "string",
      "minLength": 8,
      "maxLength": 8,
      "pattern": "^[0-9]{4}(01|02|03|04|05|06|07|08|09|10|11|12)[0-9]{2}$"
    },
    "contactDetails": {
      "type": "object",
      "additionalProperties": false,
      "required": ["address1", "address2", "postcode", "communicationPreference"],
      "properties": {
        "address1": {
          "type": "string",
          "maxLength": 35
        },
        "address2": {
          "type": "string",
          "maxLength": 35
        },
        "address3": {
          "type": "string",
          "maxLength": 35
        },
        "address4": {
          "type": "string",
          "maxLength": 35
        },
        "address5": {
          "type": "string",
          "maxLength": 35
        },
        "postcode": {
          "type": "string",
          "maxLength": 10
        },
        "countryCode": {
          "type": "string",
          "minLength": 2,
          "maxLength": 2,
          "pattern": "[A-Z][A-Z]"
        },
        "communicationPreference": {
          "type": "string",
          "minLength": 2,
          "maxLength": 2,
          "pattern": "00|02"
        },
        "phoneNumber": {
          "type": "string",
          "maxLength": 15
        },
        "email": {
          "type": "string",
          "maxLength": """${email-validation.max-total-length}""",
          "pattern": "^.{1,"""${email-validation.max-local-length}"""}@.{1,"""${email-validation.max-domain-length}"""}$"
        }
      }
    },
    "registrationChannel": {
      "type": "string",
      "maxLength": 10,
      "pattern": "^online$|^callCentre$"
    },
    "nbaDetails": {
			"type": "object",
			"properties": {
				"accountNumber": {
					"type": "string",
					"minLength": 1,
					"maxLength": 8,
					"pattern": "^(\\d){1,8}$",
					"examples": [
						"11111111"
					]
				},
				"sortCode": {
					"type": "string",
					"minLength": 8,
					"maxLength": 8,
					"pattern": "^(\\d){2}-(\\d){2}-(\\d){2}$",
					"examples": [
						"80-14-97"
					]
				},
				"accountName": {
					"type": "string",
					"minLength": 2,
					"maxLength": 35,
					"examples": [
						"Mr John Doe"
					]
				},
				"rollNumber": {
					"type": "string",
					"minLength": 4,
					"maxLength": 18,
					"pattern": "^([0-9a-zA-Z\\/\\.-]{4,18})$",
					"examples": [
						"897/98X"
					]
				}
			},
			"required": ["accountNumber","sortCode","accountName"],
			"additionalProperties": false
		}
  }
}
"""
